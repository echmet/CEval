/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp dbusinterface.xml -i dbusinterface.h -p DBusInterfaceInterface
 *
 * qdbusxml2cpp is Copyright (C) 2015 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef DBUSINTERFACEINTERFACE_H_1498406538
#define DBUSINTERFACEINTERFACE_H_1498406538

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>
#include "dbusinterface.h"

/*
 * Proxy class for interface dataloader.loader
 */
class DataloaderLoaderInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "dataloader.loader"; }

public:
    DataloaderLoaderInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~DataloaderLoaderInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<IPCDBusDataPack> loadData(const QString &formatTag, int loadOption)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(formatTag) << QVariant::fromValue(loadOption);
        return asyncCallWithArgumentList(QLatin1String("loadData"), argumentList);
    }

    inline QDBusPendingReply<IPCDBusDataPack> loadDataFile(const QString &formatTag, const QString &filePath, int loadOption)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(formatTag) << QVariant::fromValue(filePath) << QVariant::fromValue(loadOption);
        return asyncCallWithArgumentList(QLatin1String("loadDataFile"), argumentList);
    }

    inline QDBusPendingReply<IPCDBusDataPack> loadDataHint(const QString &formatTag, const QString &hint, int loadOption)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(formatTag) << QVariant::fromValue(hint) << QVariant::fromValue(loadOption);
        return asyncCallWithArgumentList(QLatin1String("loadDataHint"), argumentList);
    }

    inline QDBusPendingReply<IPCDBusSupportedFileFormatVec> supportedFileFormats()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("supportedFileFormats"), argumentList);
    }

Q_SIGNALS: // SIGNALS
};

namespace dataloader {
  typedef ::DataloaderLoaderInterface loader;
}
#endif
